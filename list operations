#append - append is for adding something in lists
#lists are always represented as square brackets[]
# tuples are represented as prentheies 
# sets are represented as curly brackets
# list syntax is denoted by list.append(items)

from symbol import parameters


currencies = ['Doller'. 'Euro', 'pond']

#append 'Yen' to the list
currencies.append('yen')

print(currencies)



#index - method returns the index of the specified elements in the list.
# the syntax of the list - list.indix(elements, start, end)
# elements - the element to be searched
#start(optional) - start searching from this index
#end(optional) - search the element up to this index
 
animals = ['cat', 'Dog', 'horse']

index = animals.index('Dog', 1, 2)
print(index)


#extent - this is used for adding two lists
#syntax for extend - list1.extend(list2)
prime_numbers = [1, 2,3,4]
numbers = [1, 4]
numbers.extend(prime_numbers)

print('list after extend', numbers)

#But there are other ways to extend list 
# '+' operator

a = [1, 2]
b = [3, 4]

a+=b # a = a+b
print(a)

# the list slicing syntax

a = [1, 2]
b = [3, 4]
a[len(a):] = b
print('a=', a)


# difference between append and extend
a1 = [1, 2]
a2 = [1, 2]
b = [1,2,3,4]

#a1 = [1, 2, 3, 4]
a1.extend(b)

#a2 = [1, 2, (3, 4)]
a2.append(b)
print(a2)


#insert - this method inserts an element to the list at the specified index.
#syntax - list.insert(i, element)
#here element is inserted to the list at the ith index
vowels = ['a', 'e', 'i', 'u']
vowels.insert(3, 'o')
print(vowels)

# inset methdo can add sets and tuples to the list even a new list can be inserted to te list

#remove - method removies the list matching elements 

prime_numbers = [2,3,4,5,6]
prime_numbers.remove(4)
print(prime_numbers)

#count - method returns the number of times the specified elements appears inthe list
#syntax list.count(elem)
numbers = [2, 3, 4, 5, 2,]
numbers.count(2)
print(count)

#pop - method removes the item at the given index from the list and returns the removed item.
#syntax - list.pop(index)
prime_numbers = [2, 3, 4, 5]
prime_numbers.pop(3)


#reverse - this method reverses the elements of the list.
#syntax list.reverse()
prime_numbers = [2, 3, 5, 7]
prime_numbers.reverse()
 
#syntax system[start:stop:step]
reversed_list = prime_numbers[::-1]
print(reversed_list)

#accessing elements in reversed order
#if you need to access individual elements of a list
#in the reverseorder, it's better to use the reversed() funcation

for 0 in reversed(prime_numbers):
    print(o)
#oytput for this
#2
#3
#5
#7



#sort -method sorts the items of a list in ascending or descending order.
#syntax - list.sort(key=..., reverse=...)
#reverse- if True the sorted list is reversed
#key - funcation that serves as a key for the sort comparison
# the sort() method does not return any value

rime_numbers.sort()
#sort in descending order
prime_numbers.sort(reverse= True)

#other method to solve sorted list -
#syntax - sorted(list, reverse = True)


#take secind element for sort
def takesecond(elem):
    return elem[1]

#random list
random = [(2, 2), (3, 4), (4, 1), (1, 3)]
#sort list with key
random.sort(key=takesecond)

#print list
print(random)

# if you want your own implementation for sorting,
# the sort() method accepts a Key funcation as an optional parameters
# list.sort(key=len)
# sorted(list, key=len)
#ere len is python in built funcation to count the length of an element.
#the list is sorted based on the length of each element, from lowest count to highest.

#we know that a tuple is sorted using its first parameter by default.


#sorted - the sorted( function sorts the elements of a given itereable in a specific order(ascending or descending)
#and return it as a list.

numbers= [4, 2, 12, 8]
sorted_numbers = sorted(numbers)
print(sorted_numbers)

#syntax of sorted - sorted(iterable, key=None, reverse=False)
#itereable - A sequence(string, tuple, list) or collection(set, dictinary, frozen set)
#Reverse - this is an optional if True or Flase
#key- a function that serves as a key for the sort comparison

# a list also has the sort() method which performs the same way
#as sorted(). the only difference is that the sort() 
#method does not return any value and changes the original list.


#clear()- remove all elements from the list
# if you are using python 2 or python 3.2 and below
# you can not use the clear() method. 
#you can use the del operator instead.
#copy()- method returns a ahallow copy of the list.
#syntax = new_list= list.copy()

numbers = prime_numbers.copy()
print(numbers)

list = ['cat, 0, 6, 7]
new_list = list[:]
new_list.append('dog')
print(new_list)

